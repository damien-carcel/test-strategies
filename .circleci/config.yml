version: 2.1

aliases:
  workflow_context_and_filters: &workflow_context_and_filters
    context:
      - docker-hub-credentials
    filters:
      branches:
        ignore:
          - main

  job_executor: &job_executor
    machine:
      image: ubuntu-2204:2024.05.1

workflows:
  pull_request:
    jobs:
      - demo:
          <<: *workflow_context_and_filters
      - presentation:
          <<: *workflow_context_and_filters

jobs:
  presentation:
    <<: *job_executor
    steps:
      - checkout
      - set_host_user_ids_environment_variable
      - run:
          name: Setup cache directory
          command: ./.devcontainer/setup.sh
      - run:
          name: Install the latest Task binary
          command: npm install -g @go-task/cli
      - restore_cache:
          keys:
            - npm-{{ .Environment.CACHE_VERSION }}-{{ checksum "package-lock.json" }}
            - npm-{{ .Environment.CACHE_VERSION }}-
      - run:
          name: Install dependencies
          command: task presentation:dependencies:install
      - save_cache:
          key: npm-{{ .Environment.CACHE_VERSION }}-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Check the code formatting
          command: task presentation:tests:static:format:check
      - run:
          name: Lint the style sheets
          command: task presentation:tests:static:style-sheet:lint
      - run:
          name: Lint the application code
          command: task presentation:tests:static:code:lint -- --format=junit -o test_results/eslint.xml
      - store_artifacts:
          path: test_results
      - store_test_results:
          path: test_results

  demo:
    <<: *job_executor
    steps:
      - checkout
      - set_host_user_ids_environment_variable
      - run:
          name: Setup cache directory
          command: ./.devcontainer/setup.sh
      - run:
          name: Install the latest Task binary
          command: npm install -g @go-task/cli
      - restore_cache:
          keys:
            - composer-{{ .Environment.CACHE_VERSION }}-{{ checksum "demo/composer.lock" }}
            - composer-{{ .Environment.CACHE_VERSION }}-
      - run:
          name: Install dependencies
          command: task demo:dependencies:install
      - save_cache:
          key: composer-{{ .Environment.CACHE_VERSION }}-{{ checksum "demo/composer.lock" }}
          paths:
            - ./demo/vendor
      - run:
          name: Create the test results directory
          command: mkdir -p demo/test_results
      - run:
          name: Check the code-style
          command: task demo:tests:code-style:check -- --format=junit > demo/test_results/cs.xml
      - run:
          name: Run the static-analysis
          command: task demo:tests:static-analysis -- --error-format=junit > demo/test_results/sa.xml
      - run:
          name: Run the unit tests
          command: task demo:tests:unit -- --log-junit test_results/unit.xml
      - run:
          name: Run the acceptance tests
          command: task demo:tests:acceptance -- --log-junit test_results/acceptance.xml
      - run:
          name: Start the database
          command: task demo:database:up demo:database:migrate
      - run:
          name: Run the integration tests
          command: task demo:tests:integration -- --log-junit test_results/integration.xml
      - run:
          name: Run the end-to-end tests
          command: task demo:tests:end-to-end -- --log-junit test_results/e2e.xml
      - store_artifacts:
          path: demo/test_results
      - store_test_results:
          path: demo/test_results

commands:
  set_host_user_ids_environment_variable:
    description: "Set Docker Compose HOST_USER_IDS environment variable according to the host virtual machine"
    steps:
      - run:
          name: Set Docker Compose HOST_USER_IDS environment variable according to the host virtual machine
          command: |
            echo 'export HOST_USER_IDS="$(id -u):$(id -g)"' >> $BASH_ENV
